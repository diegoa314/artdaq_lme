////////////////////////////////////////////////////////////////////////
// Class:       NthEvent
// Module Type: filter
// File:        NthEvent_module.cc
//
// Generated at Tue Jan  6 11:52:08 2015 by John Freeman using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"

#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

class NthEvent;

/**
 * \brief An art::EDFilter module that passes one out of N events
 */
class NthEvent : public art::EDFilter
{
public:
	/**
	 * \brief Construct the NthEvent Filter
	 * \param p fhicl::ParameterSet for configuring the filter. Parameter "nth", mod of events to pass
	 */
	explicit NthEvent(fhicl::ParameterSet const& p);

	// The destructor generated by the compiler is fine for classes
	// without bare pointers or other resource use.

	/// Plugins should not be copied or assigned.
	NthEvent(NthEvent const&) = delete;

	/// Plugins should not be copied or assigned.
	NthEvent(NthEvent&&) = delete;

	/// Plugins should not be copied or assigned.
	NthEvent& operator =(NthEvent const&) = delete;

	/// Plugins should not be copied or assigned.
	NthEvent& operator =(NthEvent&&) = delete;

	/**
	 * \brief Perform the filtering. NthEvent module passes events where event number % nth == 0
	 * \param e Event to filter
	 * \return Whether the event passes the filter
	 */
	bool filter(art::Event& e) override;


private:

	uint32_t nth_;
};


NthEvent::NthEvent(fhicl::ParameterSet const& p)
	: nth_(p.get<uint32_t>("nth")) {}

inline
bool NthEvent::filter(art::Event& e)
{
	return e.event() % nth_ == 0 ? true : false;
}

DEFINE_ART_MODULE(NthEvent)
