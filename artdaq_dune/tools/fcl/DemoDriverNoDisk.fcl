# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start
#  Guide"

events_to_generate: 100
run_number: 101
transition_timeout: 30
debug_cout: false

fragment_receiver: {

   # Parameters defining and configuring the fragment generator to be used
   generator: ToySimulator 
   fragment_type: TOY2        # Make sure downstream modules know about this fragment_type!
   nADCcounts: 20971500
   distribution_type: 3
   throttle_usecs: 0
   random_seed: 6514

   # Parameters configuring the fragment generator's parent class
   # artdaq::CommandableFragmentGenerator

   fragment_id: 0
   board_id: 0
}

event_builder: {
  expected_fragments_per_event: 1
  max_fragment_size_bytes: 100000000
  buffer_count: 10
  use_art: true
  print_event_store_stats: false
  verbose: true
}

######################################################################
# The ART code
######################################################################

physics:
{
  analyzers:
  {
    toyDump:
    {
      module_type: ToyDump
      raw_data_label: daq
      frag_type: @local::fragment_receiver.fragment_type
      num_adcs_to_show: 10   # Obviously this should be no more than ADC counts per fragment
    }
  }

  producers:
  {
  artdaqDemoBuildInfo:
  {
   module_type: ArtdaqDemoBuildInfo

   ArtdaqDemoBuildInfo: myInstanceName
   }
  }

#  a1: [ toyDump ]
#  p1: [ artdaqDemoBuildInfo ]
#  e1: [ out1, rootout ]
#  end_paths: [ a1, e2 ]

#   e2: [ rootout ]
#   end_paths: [e2]
}

outputs:
{

 rootout:
  {
    module_type: RootOutput
    fileName: "/tmp/artdaqDemoTest.root"
    #fileName: "driver.root"
    compressionLevel: 0
  }

  out1:
  {
    module_type: FileDumperOutput
    wantProductFriendlyClassName: true
  }
}

source:
{
  module_type: DemoInput
}

process_name: DemoDriver
