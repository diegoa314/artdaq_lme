# This file contains the default values for all CommandableFragmentGenerator FHiCL parameters
# Feel free to include it in your CommandableFragmentGenerator subclass configurations
# See artdaq_demo/tools/generateFragmentReceiver.rb for an example

# board_id: # NO DEFAULT VALUE

fragment_ids: []
fragment_id: -99 # Please define only one of these

# How long should the BoardReader wait at the top of getNext when a stop is issued?
sleep_on_stop_us: 0


# Data Request configuration
request_mode: "Ignored" # Possible values are: Ignored, Single, Buffer, Window
                      # Ignored: Request messages are ignored.
                      # Single: When request is received, sends last data point received
                      # Buffer: When request is received, sends all data recieved since last request
                      # Window: When request is received, sends all data satisfying timestamp window defined below
					  # Window mode will also check RequestMessage for additional requests that it may not have satisfied.
end_of_run_quiet_timeout_ms: 1000 # Time, in milliseconds, that the entire system must be quiet for check_stop to return true in request mode. 
                                  # **DO NOT EDIT UNLESS YOU KNOW WHAT YOU ARE DOING!**

# Data Buffer configuration for Ignored, Buffer, and Window request modes
data_buffer_depth_fragments: 1000
data_buffer_depth_mb: 1000

# Request Socket configuration
request_port: 3001
request_address: "227.128.12.26" # Multicast request address

# Window Mode configuration
# For Window mode, timestamp must be filled in Fragment. 
# Timestamp is arbitrary, but must be a "clock" in that it is a monotonically-increasing number
request_window_offset: 0 # Request message contains tzero. Window will be from tzero - offset to tzero + width
request_window_width: 0
stale_request_timeout: "0xFFFFFFFF" # How long to wait before discarding request messages that are outside the available data
request_windows_are_unique: true # If request windows are unique, avoids a copy operation, but the same data point cannot be used for two requests. If this is not anticipated, leave set to "true"

# Threading
separate_data_thread: false # MUST be true for requests to be applied! If requests are not desired, but a separate readout thread is, set this to true and request_mode to ignored.
separate_monitoring_thread: false # Whether a thread should be started which periodically calls checkHWStatus_, a user-defined function which should be used to check hardware status registers and report to MetricMan.
hardware_poll_interval_us: 0 # How often, in microseconds, checkHWStatus_() should be called. 0 to disable.

